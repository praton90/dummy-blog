{"version":3,"sources":["components/Blog/Blog.module.css","components/Layout/Nav/Nav.module.css","components/Layout/Header/Header.module.css","components/Card/Card.module.css","components/Spinner/Spinner.module.css","containers/Posts/Posts.module.css","components/Layout/Nav/Nav.js","components/Layout/Header/Header.js","components/Card/Card.js","components/Post/Post.js","components/Spinner/Spinner.js","containers/Posts/Posts.js","containers/Posts/FullPost/FullPost.js","components/About/About.js","components/Blog/Blog.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","nav","props","className","styles","Nav","to","header","Header","card","Card","children","post","title","createdAt","author","content","spinner","Spinner","Posts","randomDate","Date","Math","floor","random","toDateString","state","posts","loading","axios","get","then","res","from","fetchedPosts","data","slice","map","setState","catch","error","console","log","this","length","index","key","id","CardLink","Post","body","Component","FullPost","postId","match","params","modifiedPostBody","i","fetchedPost","style","textAlign","color","about","blog","Row","Column","path","exact","component","About","App","Blog","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.39caa444.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Row\":\"Blog_Row__2uXom\",\"Column\":\"Blog_Column__3W-eZ\",\"Leftcolumn\":\"Blog_Leftcolumn__2pjB_\",\"Rightcolumn\":\"Blog_Rightcolumn__2JsJa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Nav\":\"Nav_Nav__2KqNQ\",\"ActiveLink\":\"Nav_ActiveLink__1eqYd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3w3i_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__2v91Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__24ERy\",\"load8\":\"Spinner_load8__1FLaS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardLink\":\"Posts_CardLink__11PGE\"};","import React from \"react\";\n\nimport styles from \"./Nav.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\nconst nav = (props) => {\n  return (\n    <nav className={styles.Nav}>\n      <ul>\n        <li>\n          <NavLink to=\"/\">Home</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/about\">About this</NavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default nav;\n","import React from \"react\";\n\nimport Nav from \"../Nav/Nav\";\nimport styles from \"./Header.module.css\";\n\nconst header = (props) => {\n  return (\n    <header>\n      <div className={styles.Header}>\n        <h1>React Blog</h1>\n        <p>\n          This is a dummy blog used to learn and practise some React concepts\n        </p>\n      </div>\n      <Nav />\n    </header>\n  );\n};\n\nexport default header;\n","import React from \"react\";\n\nimport styles from \"./Card.module.css\";\n\nconst card = (props) => {\n  return <div className={styles.Card}>{props.children}</div>;\n};\n\nexport default card;\n","import React from \"react\";\n\nimport Card from \"../Card/Card\";\n\nconst post = (props) => {\n  return (\n    <Card>\n      <h2>{props.title}</h2>\n      <h5>\n        Created: {props.createdAt} by {props.author}\n      </h5>\n      <p>{props.content}</p>\n    </Card>\n  );\n};\n\nexport default post;\n","import React from \"react\";\n\nimport styles from \"./Spinner.module.css\";\n\nconst spinner = (props) => {\n  return <div className={styles.Spinner}>Loading...</div>;\n};\n\nexport default spinner;\n","import React, { Component, Fragment } from \"react\";\nimport axios from \"axios\";\n\nimport Post from \"../../components/Post/Post\";\nimport Card from \"../../components/Card/Card\";\nimport { Link } from \"react-router-dom\";\nimport Spinner from \"../../components/Spinner/Spinner\";\n\nimport styles from \"./Posts.module.css\";\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      loading: true,\n    };\n  }\n\n  randomDate = () => {\n    return new Date(\n      \"2019\",\n      Math.floor(Math.random() * 10),\n      Math.floor(Math.random() * 10)\n    ).toDateString();\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/posts\")\n      .then((res) => {\n        const from = Math.floor(Math.random() * 10);\n        const to = from + 10;\n        const fetchedPosts = res.data.slice(from, to).map((post) => ({\n          ...post,\n          createdAt: this.randomDate(),\n        }));\n\n        this.setState({\n          posts: fetchedPosts,\n          loading: false,\n        });\n      })\n      .catch((error) => {\n        this.setState({\n          loading: false,\n        });\n        console.log(\"Something wrong happened\", error);\n      });\n  }\n\n  render() {\n    let posts = (\n      <Card>\n        <Spinner />\n      </Card>\n    );\n\n    if (!this.state.loading) {\n      if (this.state.posts.length) {\n        posts = this.state.posts.map((post, index) => (\n          <Link\n            key={index}\n            to={\"/posts/\" + post.id}\n            className={styles.CardLink}\n          >\n            <Post\n              title={post.title}\n              content={post.body}\n              author={post.author}\n              createdAt={post.createdAt}\n            />\n          </Link>\n        ));\n      } else {\n        posts = (\n          <Card>\n            <p>No posts available</p>\n          </Card>\n        );\n      }\n    }\n\n    return <Fragment>{posts}</Fragment>;\n  }\n}\n\nexport default Posts;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport Card from \"../../../components/Card/Card\";\nimport Spinner from \"../../../components/Spinner/Spinner\";\n\nclass FullPost extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: null,\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    const postId = this.props.match.params.id;\n    // console.log(\"post id\", postId);\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/posts/\" + postId)\n      .then((res) => {\n        let modifiedPostBody = \"\";\n        for (let i = 0; i < 20; i++) {\n          modifiedPostBody = modifiedPostBody + res.data.body;\n        }\n        const fetchedPost = {\n          ...res.data,\n          body: modifiedPostBody,\n          createdAt: new Date(2019, 5, 17).toDateString(),\n          author: \"Lorem Ipsum\",\n        };\n\n        this.setState({ post: fetchedPost, loading: false });\n      })\n      .catch((error) => {\n        this.setState({\n          loading: false,\n        });\n        console.log(\"Something wrong happened\", error);\n      });\n  }\n\n  render() {\n    let content = <Spinner />;\n\n    if (!this.state.loading) {\n      if (this.state.post) {\n        content = (\n          <div>\n            <h1>{this.state.post.title}</h1>\n            <h3 style={{ textAlign: \"left\", color: \"grey\" }}>\n              Created: {this.state.post.createdAt} | Author:{\" \"}\n              {this.state.post.author}\n            </h3>\n            <p style={{ textAlign: \"left\" }}>{this.state.post.body}</p>\n          </div>\n        );\n      } else {\n        content = <p style={{ color: \"red\" }}>Something went wrong</p>;\n      }\n    }\n\n    return <Card>{content}</Card>;\n  }\n}\n\nexport default FullPost;\n","import React from \"react\";\n\nimport Card from \"../Card/Card\";\n\nconst about = (props) => {\n  return (\n    <Card>\n      <h1>About this project</h1>\n    </Card>\n  );\n};\n\nexport default about;\n","import React, { Fragment } from \"react\";\nimport { Route } from \"react-router-dom\";\n\nimport Header from \"../Layout/Header/Header\";\nimport Posts from \"../../containers/Posts/Posts\";\nimport FullPost from \"../../containers/Posts/FullPost/FullPost\";\nimport About from \"../About/About\";\n\nimport styles from \"./Blog.module.css\";\n\nconst blog = () => {\n  return (\n    <Fragment>\n      <Header />\n      <div className={styles.Row}>\n        <div className={styles.Column}>\n          <Route path=\"/\" exact component={Posts} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/posts/:id\" component={FullPost} />\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default blog;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport Blog from \"../Blog/Blog\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Blog />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}